/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package uk.gov.companieshouse.monitorsubscription.matcher.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MonitorFiling extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1367427749536998944L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MonitorFilingMessage\",\"namespace\":\"uk.gov.companieshouse.monitorsubscription.matcher.schema\",\"fields\":[{\"name\":\"company_number\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"published_at\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MonitorFiling> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MonitorFiling> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MonitorFiling> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MonitorFiling> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MonitorFiling> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MonitorFilingMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MonitorFilingMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MonitorFilingMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MonitorFiling fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence company_number;
  private java.lang.CharSequence data;
  private java.lang.CharSequence published_at;
  private java.lang.CharSequence version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MonitorFiling() {}

  /**
   * All-args constructor.
   * @param company_number The new value for company_number
   * @param data The new value for data
   * @param published_at The new value for published_at
   * @param version The new value for version
   */
  public MonitorFiling(java.lang.CharSequence company_number, java.lang.CharSequence data, java.lang.CharSequence published_at, java.lang.CharSequence version) {
    this.company_number = company_number;
    this.data = data;
    this.published_at = published_at;
    this.version = version;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return company_number;
    case 1: return data;
    case 2: return published_at;
    case 3: return version;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: company_number = (java.lang.CharSequence)value$; break;
    case 1: data = (java.lang.CharSequence)value$; break;
    case 2: published_at = (java.lang.CharSequence)value$; break;
    case 3: version = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'company_number' field.
   * @return The value of the 'company_number' field.
   */
  public java.lang.CharSequence getCompanyNumber() {
    return company_number;
  }


  /**
   * Sets the value of the 'company_number' field.
   * @param value the value to set.
   */
  public void setCompanyNumber(java.lang.CharSequence value) {
    this.company_number = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.lang.CharSequence getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.CharSequence value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'published_at' field.
   * @return The value of the 'published_at' field.
   */
  public java.lang.CharSequence getPublishedAt() {
    return published_at;
  }


  /**
   * Sets the value of the 'published_at' field.
   * @param value the value to set.
   */
  public void setPublishedAt(java.lang.CharSequence value) {
    this.published_at = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Creates a new MonitorFilingMessage RecordBuilder.
   * @return A new MonitorFilingMessage RecordBuilder
   */
  public static uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder newBuilder() {
    return new uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder();
  }

  /**
   * Creates a new MonitorFilingMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MonitorFilingMessage RecordBuilder
   */
  public static uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder newBuilder(uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder other) {
    if (other == null) {
      return new uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder();
    } else {
      return new uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder(other);
    }
  }

  /**
   * Creates a new MonitorFilingMessage RecordBuilder by copying an existing MonitorFilingMessage instance.
   * @param other The existing instance to copy.
   * @return A new MonitorFilingMessage RecordBuilder
   */
  public static uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder newBuilder(uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling other) {
    if (other == null) {
      return new uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder();
    } else {
      return new uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder(other);
    }
  }

  /**
   * RecordBuilder for MonitorFilingMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MonitorFiling>
    implements org.apache.avro.data.RecordBuilder<MonitorFiling> {

    private java.lang.CharSequence company_number;
    private java.lang.CharSequence data;
    private java.lang.CharSequence published_at;
    private java.lang.CharSequence version;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.company_number)) {
        this.company_number = data().deepCopy(fields()[0].schema(), other.company_number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.published_at)) {
        this.published_at = data().deepCopy(fields()[2].schema(), other.published_at);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing MonitorFilingMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.company_number)) {
        this.company_number = data().deepCopy(fields()[0].schema(), other.company_number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.published_at)) {
        this.published_at = data().deepCopy(fields()[2].schema(), other.published_at);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'company_number' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompanyNumber() {
      return company_number;
    }


    /**
      * Sets the value of the 'company_number' field.
      * @param value The value of 'company_number'.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder setCompanyNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.company_number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'company_number' field has been set.
      * @return True if the 'company_number' field has been set, false otherwise.
      */
    public boolean hasCompanyNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'company_number' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder clearCompanyNumber() {
      company_number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.lang.CharSequence getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder setData(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'published_at' field.
      * @return The value.
      */
    public java.lang.CharSequence getPublishedAt() {
      return published_at;
    }


    /**
      * Sets the value of the 'published_at' field.
      * @param value The value of 'published_at'.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder setPublishedAt(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.published_at = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'published_at' field has been set.
      * @return True if the 'published_at' field has been set, false otherwise.
      */
    public boolean hasPublishedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'published_at' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder clearPublishedAt() {
      published_at = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.version = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.monitorsubscription.matcher.schema.MonitorFiling.Builder clearVersion() {
      version = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MonitorFiling build() {
      try {
        MonitorFiling record = new MonitorFiling();
        record.company_number = fieldSetFlags()[0] ? this.company_number : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.published_at = fieldSetFlags()[2] ? this.published_at : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.version = fieldSetFlags()[3] ? this.version : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MonitorFiling>
    WRITER$ = (org.apache.avro.io.DatumWriter<MonitorFiling>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MonitorFiling>
    READER$ = (org.apache.avro.io.DatumReader<MonitorFiling>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.company_number);

    out.writeString(this.data);

    out.writeString(this.published_at);

    out.writeString(this.version);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.company_number = in.readString(this.company_number instanceof Utf8 ? (Utf8)this.company_number : null);

      this.data = in.readString(this.data instanceof Utf8 ? (Utf8)this.data : null);

      this.published_at = in.readString(this.published_at instanceof Utf8 ? (Utf8)this.published_at : null);

      this.version = in.readString(this.version instanceof Utf8 ? (Utf8)this.version : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.company_number = in.readString(this.company_number instanceof Utf8 ? (Utf8)this.company_number : null);
          break;

        case 1:
          this.data = in.readString(this.data instanceof Utf8 ? (Utf8)this.data : null);
          break;

        case 2:
          this.published_at = in.readString(this.published_at instanceof Utf8 ? (Utf8)this.published_at : null);
          break;

        case 3:
          this.version = in.readString(this.version instanceof Utf8 ? (Utf8)this.version : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










